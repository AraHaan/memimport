name: CI
on:
  push:
    tags: [ '*' ]

jobs:
  matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        run: |
          TASKS=$(echo $(cat .github/workflows/matrix.json) | sed 's/ //g' )
          echo "matrix=$TASKS" >> $GITHUB_OUTPUT

  build:
    needs: matrix
    name: Build
    runs-on: windows-2019
    strategy:
      matrix:
        cfg: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}
          architecture: ${{ matrix.cfg.python-arch }}

      - name: Check Python install
        run: |
          which python
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          which pip
          pip --version

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip setuptools wheel

      - name: Build
        run: |
          python setup.py bdist_wheel

      - name: Prepare for deployment
        run: |
          dir dist
          $ver = (findstr /R [0-9] VERSION)
          echo $ver
          echo "VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $wheelname = python .github\helpers\get_wheel_name.py $ver
          echo $wheelname
          echo "WHEELNAME=$wheelname" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Deploy
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WHEELNAME }}
          path: |
            dist/${{ env.WHEELNAME }}

  test:
    needs: [matrix, build]
    name: Test
    runs-on: windows-2019
    strategy:
      matrix:
        cfg: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}
          architecture: ${{ matrix.cfg.python-arch }}

      - name: Check Python install
        run: |
          which python
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          which pip
          pip --version

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip setuptools wheel

      - name: Prepare for test
        run: |
          $ver = (findstr /R [0-9] VERSION)
          echo $ver
          echo "VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $wheelname = python .github\helpers\get_wheel_name.py $ver
          echo $wheelname
          echo "WHEELNAME=$wheelname" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WHEELNAME }}

      - name: Install
        run: |
          dir
          pip install ${{ env.WHEELNAME }}
          python -c "import zipextimporter"

      - name: Test
        run: |
          python test.py prepare test

  release:
    needs: [matrix, build, test]
    name: Release
    runs-on: windows-2019
    strategy:
      matrix:
        cfg: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.cfg.python-version }}
          architecture: ${{ matrix.cfg.python-arch }}

      - name: Check Python install
        run: |
          which python
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          which pip
          pip --version

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip setuptools wheel

      - name: Prepare for release
        run: |
          $ver = (findstr /R [0-9] VERSION)
          echo $ver
          echo "VER=$ver" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $wheelname = python .github\helpers\get_wheel_name.py $ver
          echo $wheelname
          echo "WHEELNAME=$wheelname" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.WHEELNAME }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.WHEELNAME }}
